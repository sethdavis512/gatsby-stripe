{"version":3,"sources":["webpack:///./src/pages/products/{StripePrice.product__name}.tsx"],"names":["ProductRow","styled","div","ProductImage","ProductDetails","CartControls","QuantityControls","Price","h4","Quantity","span","AddToCartButton","Button","theme","tertiary","query","Product","product","data","stripePrice","useState","quantity","setQuantity","createHandleSetQuantity","isDecrement","cartActions","useCart","images","length","map","url","key","getUniqueId","src","width","name","description","price","onClick","disabled","addToCart","createHandleAddToCart"],"mappings":"2FAAA,8IAWMA,EAAaC,IAAOC,IAAV,2FAAGD,CAAH,iCAKVE,EAAeF,IAAOC,IAAV,6FAAGD,CAAH,oBAIZG,EAAiBH,IAAOC,IAAV,+FAAGD,CAAH,oBAIdI,EAAeJ,IAAOC,IAAV,6FAAGD,CAAH,MAEZK,EAAmBL,IAAOC,IAAV,iGAAGD,CAAH,yBAIhBM,EAAQN,IAAOO,GAAV,sFAAGP,CAAH,mCAKLQ,EAAWR,IAAOS,KAAV,yFAAGT,CAAH,sCAKRU,EAAkBV,YAAOW,KAAV,gGAAGX,CAAH,8FACG,qBAAGY,MAAkBC,YACzB,qBAAGD,MAAkBC,YAsE5BC,EAAQ,aAeNC,UA7EC,SAAC,GAAa,IAClBC,EADkB,EAAXC,KACUC,YAAjBF,QADkB,EAEMG,mBAAS,GAAlCC,EAFmB,KAETC,EAFS,KAGpBC,EAA0B,SAAAC,GAAW,OAAI,kBAC3CF,EAAYE,EAAcH,EAAW,EAAIA,EAAW,KAE/CI,EAAeC,cANE,GAU1B,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC1B,EAAD,KACI,kBAACG,EAAD,KACKc,GAAWA,EAAQU,QAAUV,EAAQU,OAAOC,OACvCX,EAAQU,OAAOE,KAAI,SAAAC,GAAG,OAClB,yBACIC,IAAKC,YAAY,iBACjBC,IAAKH,EACLI,MAAM,WAGd,aAEV,kBAAC9B,EAAD,KACKa,GAAWA,EAAQkB,MAAQ,4BAAKlB,EAAQkB,MACxClB,GAAWA,EAAQmB,aAChB,2BAAInB,EAAQmB,aAEfnB,GAAWA,EAAQoB,OAChB,kBAAC9B,EAAD,SACMU,EAAQoB,MAAQ,KAG1B,kBAAChC,EAAD,KACA,kBAACC,EAAD,KACI,kBAAC,IAAD,CACIgC,QAASf,GAAwB,GACjCgB,SAAuB,IAAblB,GAFd,KAMA,kBAACZ,EAAD,KAAWY,GACX,kBAAC,IAAD,CAAQiB,QAASf,GAAwB,IAAzC,MAIJ,kBAACZ,EAAD,CACI2B,QA1CM,SAAArB,GAAO,OAAI,kBACrCQ,EAAYe,UAAUvB,EAASI,IAyCFoB,CAAsBxB,GAC/BsB,SAAuB,IAAblB,GAFd,OAISA,EAJT","file":"component---src-pages-products-stripe-price-product-name-tsx-e1f8b2c696bc94305c9c.js","sourcesContent":["import React, { useState } from 'react'\nimport { graphql } from 'gatsby'\nimport styled from 'styled-components'\n\nimport Button from '../../components/Button'\nimport Container from '../../components/Container'\nimport Layout from '../../components/Layout'\nimport useCart from '../../hooks/useCart'\n\nimport { getUniqueId } from '../../utils'\n\nconst ProductRow = styled.div`\n    display: flex;\n    margin: 0 auto;\n`\n\nconst ProductImage = styled.div`\n    flex: 1 0 auto;\n`\n\nconst ProductDetails = styled.div`\n    flex: 1 0 auto;\n`\n\nconst CartControls = styled.div``\n\nconst QuantityControls = styled.div`\n    margin-bottom: 1rem;\n`\n\nconst Price = styled.h4`\n    font-size: 2rem;\n    margin: 1rem 0;\n`\n\nconst Quantity = styled.span`\n    padding: 0 1rem;\n    font-weight: bold;\n`\n\nconst AddToCartButton = styled(Button)`\n    background-color: ${({ theme }) => theme.tertiary};\n    border-color: ${({ theme }) => theme.tertiary};\n\n    :hover {\n        background-color: green;\n        border-color: green;\n    }\n`\n\nconst Product = ({ data }) => {\n    const { product } = data.stripePrice\n    const [quantity, setQuantity] = useState(0)\n    const createHandleSetQuantity = isDecrement => () =>\n        setQuantity(isDecrement ? quantity - 1 : quantity + 1)\n\n    const [, cartActions] = useCart()\n    const createHandleAddToCart = product => () =>\n        cartActions.addToCart(product, quantity)\n\n    return (\n        <Layout>\n            <Container>\n                <ProductRow>\n                    <ProductImage>\n                        {product && product.images && product.images.length\n                            ? product.images.map(url => (\n                                  <img\n                                      key={getUniqueId('product-image')}\n                                      src={url}\n                                      width=\"100\"\n                                  />\n                              ))\n                            : 'No images'}\n                    </ProductImage>\n                    <ProductDetails>\n                        {product && product.name && <h1>{product.name}</h1>}\n                        {product && product.description && (\n                            <p>{product.description}</p>\n                        )}\n                        {product && product.price && (\n                            <Price>\n                                ${product.price / 100}\n                            </Price>\n                        )}\n                        <CartControls>\n                        <QuantityControls>\n                            <Button\n                                onClick={createHandleSetQuantity(true)}\n                                disabled={quantity === 0}\n                            >\n                                -\n                            </Button>\n                            <Quantity>{quantity}</Quantity>\n                            <Button onClick={createHandleSetQuantity(false)}>\n                                +\n                            </Button>\n                        </QuantityControls>\n                        <AddToCartButton\n                            onClick={createHandleAddToCart(product)}\n                            disabled={quantity === 0}\n                        >\n                            Add {quantity} to cart\n                        </AddToCartButton>\n                        </CartControls>\n                    </ProductDetails>\n                </ProductRow>\n            </Container>\n        </Layout>\n    )\n}\n\nexport const query = graphql`\n  query ($id: String) {\n    stripePrice(id: { eq: $id }) {\n      id\n      unit_amount\n      currency\n      product {\n        name\n        description\n        images\n      }\n    }\n  }\n`\n\nexport default Product\n"],"sourceRoot":""}