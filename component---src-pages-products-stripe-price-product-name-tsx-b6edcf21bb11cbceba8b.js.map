{"version":3,"sources":["webpack:///./src/pages/products/{StripePrice.product__name}.tsx"],"names":["ProductRow","styled","div","ProductImage","ProductDetails","CartControls","QuantityControls","Price","h4","Quantity","span","AddToCartButton","Button","theme","tertiary","query","Product","data","product","getProduct","useState","quantity","setQuantity","createHandleSetQuantity","isDecrement","cartActions","useCart","images","length","map","url","key","getUniqueId","src","name","description","price","onClick","disabled","icon","faMinus","faPlus","addToCart","createHandleAddToCart"],"mappings":"2FAAA,sKAiBMA,EAAaC,IAAOC,IAAV,2FAAGD,CAAH,2DAOVE,EAAeF,IAAOC,IAAV,6FAAGD,CAAH,6CAMZG,EAAiBH,IAAOC,IAAV,+FAAGD,CAAH,iEAQdI,EAAeJ,IAAOC,IAAV,6FAAGD,CAAH,MAEZK,EAAmBL,IAAOC,IAAV,iGAAGD,CAAH,yBAIhBM,EAAQN,IAAOO,GAAV,sFAAGP,CAAH,mCAKLQ,EAAWR,IAAOS,KAAV,yFAAGT,CAAH,sCAKRU,EAAkBV,YAAOW,KAAV,gGAAGX,CAAH,8FACG,qBAAGY,MAAkBC,YACzB,qBAAGD,MAAkBC,YA2E5BC,EAAQ,aAeNC,UAlFC,SAAC,GAA2B,IAAzBC,EAAyB,EAAzBA,KACTC,EAAUC,YAAWF,GADa,EAERG,mBAAS,GAAlCC,EAFiC,KAEvBC,EAFuB,KAGlCC,EAA0B,SAACC,GAAD,OAA0B,kBACtDF,EAAYE,EAAcH,EAAW,EAAIA,EAAW,KAE/CI,EAAeC,cANgB,GAUxC,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC1B,EAAD,KACI,kBAACG,EAAD,KACKe,GAAWA,EAAQS,QAAUT,EAAQS,OAAOC,OACvCV,EAAQS,OAAOE,KAAI,SAACC,GAAD,OACf,yBACIC,IAAKC,YAAY,iBACjBC,IAAKH,OAGb,aAEV,kBAAC1B,EAAD,KACKc,GACG,oCACKA,EAAQgB,MAAQ,4BAAKhB,EAAQgB,MAC7BhB,EAAQiB,aACL,2BAAIjB,EAAQiB,aAEfjB,EAAQkB,OACL,kBAAC7B,EAAD,SAASW,EAAQkB,MAAQ,MAIrC,kBAAC/B,EAAD,KACI,kBAACC,EAAD,KACI,kBAAC,IAAD,CACI+B,QAASd,GAAwB,GACjCe,SAAuB,IAAbjB,GAEV,kBAAC,IAAD,CAAiBkB,KAAMC,OAE3B,kBAAC/B,EAAD,KAAWY,GACX,kBAAC,IAAD,CACIgB,QAASd,GAAwB,IAEjC,kBAAC,IAAD,CAAiBgB,KAAME,QAG/B,kBAAC9B,EAAD,CACI0B,QA7CE,SAACnB,GAAD,OAAkB,kBAC5CO,EAAYiB,UAAUxB,EAASG,IA4CEsB,CAAsBzB,GAC/BoB,SAAuB,IAAbjB,GAFd,OAISA,EAJT","file":"component---src-pages-products-stripe-price-product-name-tsx-b6edcf21bb11cbceba8b.js","sourcesContent":["import React, { useState } from 'react'\nimport { graphql } from 'gatsby'\nimport styled from 'styled-components'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons'\n\nimport Button from '../../components/Button'\nimport Container from '../../components/Container'\nimport Layout from '../../components/Layout'\nimport useCart from '../../hooks/useCart'\n\nimport { getProduct, getUniqueId } from '../../utils'\n\ninterface ProductProps {\n    data: any\n}\n\nconst ProductRow = styled.div`\n    @media (min-width: 768px) {\n        display: flex;\n        margin: 0 auto;\n    }\n`\n\nconst ProductImage = styled.div`\n    @media (min-width: 768px) {\n        flex: 0 0 40%;\n    }\n`\n\nconst ProductDetails = styled.div`\n    padding: 0 1rem 1rem;\n\n    @media (min-width: 768px) {\n        flex: 0 0 60%;\n    }\n`\n\nconst CartControls = styled.div``\n\nconst QuantityControls = styled.div`\n    margin-bottom: 1rem;\n`\n\nconst Price = styled.h4`\n    font-size: 2rem;\n    margin: 1rem 0;\n`\n\nconst Quantity = styled.span`\n    padding: 0 1rem;\n    font-weight: bold;\n`\n\nconst AddToCartButton = styled(Button)`\n    background-color: ${({ theme }) => theme.tertiary};\n    border-color: ${({ theme }) => theme.tertiary};\n\n    :hover {\n        background-color: green;\n        border-color: green;\n    }\n`\n\nconst Product = ({ data }: ProductProps) => {\n    const product = getProduct(data)\n    const [quantity, setQuantity] = useState(0)\n    const createHandleSetQuantity = (isDecrement: boolean) => () =>\n        setQuantity(isDecrement ? quantity - 1 : quantity + 1)\n\n    const [, cartActions] = useCart()\n    const createHandleAddToCart = (product: any) => () =>\n        cartActions.addToCart(product, quantity)\n\n    return (\n        <Layout>\n            <Container>\n                <ProductRow>\n                    <ProductImage>\n                        {product && product.images && product.images.length\n                            ? product.images.map((url: string) => (\n                                  <img\n                                      key={getUniqueId('product-image')}\n                                      src={url}\n                                  />\n                              ))\n                            : 'No images'}\n                    </ProductImage>\n                    <ProductDetails>\n                        {product && (\n                            <>\n                                {product.name && <h1>{product.name}</h1>}\n                                {product.description && (\n                                    <p>{product.description}</p>\n                                )}\n                                {product.price && (\n                                    <Price>${product.price / 100}</Price>\n                                )}\n                            </>\n                        )}\n                        <CartControls>\n                            <QuantityControls>\n                                <Button\n                                    onClick={createHandleSetQuantity(true)}\n                                    disabled={quantity === 0}\n                                >\n                                    <FontAwesomeIcon icon={faMinus} />\n                                </Button>\n                                <Quantity>{quantity}</Quantity>\n                                <Button\n                                    onClick={createHandleSetQuantity(false)}\n                                >\n                                    <FontAwesomeIcon icon={faPlus} />\n                                </Button>\n                            </QuantityControls>\n                            <AddToCartButton\n                                onClick={createHandleAddToCart(product)}\n                                disabled={quantity === 0}\n                            >\n                                Add {quantity} to cart\n                            </AddToCartButton>\n                        </CartControls>\n                    </ProductDetails>\n                </ProductRow>\n            </Container>\n        </Layout>\n    )\n}\n\n// Page query required since we need to pass a variable\n// https://www.gatsbyjs.com/docs/static-query/#how-staticquery-differs-from-page-query\nexport const query = graphql`\n    query($id: String) {\n        stripePrice(id: { eq: $id }) {\n            id\n            unit_amount\n            currency\n            product {\n                name\n                description\n                images\n            }\n        }\n    }\n`\n\nexport default Product\n"],"sourceRoot":""}